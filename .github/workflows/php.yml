name: Laravel File Manager Package

on: [ push ]

jobs:
  phpcs:
    name: PHPCS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: PHPCS check
        uses: chekalsky/phpcs-action@v1
        with:
          enable_warnings: true

  testing:
    name: Test on PHP ${{ matrix.php }} with ${{ matrix.setup }} dependencies

    needs: [ phpcs ]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        setup: [ 'basic', 'lowest' ]
        php: [ '7.4', '8.0' ]

    steps:
      - uses: actions/checkout@v2

      - name: Use PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v1 # Action page: <https://github.com/shivammathur/setup-php>
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring
          coverage: xdebug

      - name: Get Composer Cache Directory # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Validate composer.json
        run: composer validate

      - name: Install [LOWEST] Composer dependencies
        if: matrix.setup == 'lowest'
        run: composer update --prefer-dist --no-interaction --no-suggest --prefer-lowest

      - name: Install [BASIC] Composer dependencies
        if: matrix.setup == 'basic'
        run: composer update --prefer-dist --no-interaction --no-suggest

      # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
      # Docs: https://getcomposer.org/doc/articles/scripts.md

      - name: Run test suite
        run: composer test

  release:
    name: Create Release
    needs: [ testing ]
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '.0') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
